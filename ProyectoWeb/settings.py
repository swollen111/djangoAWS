"""
Django settings for ProyectoWeb project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from pathlib import Path

from django.contrib.messages import constants as mensajes_de_error

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_53v6ylo8$+&ub*0%(1at3)@&ofd(sloi-i!y1sc%gj(ht0oaj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ProyectoWebApp',
    'servicios',
    'blog',
    'contacto',
    'tienda',
    'carro',
    'autenticacion',
    'crispy_forms',
    'crispy_bootstrap4',
    'pedidos'
    
    

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ProyectoWeb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'carro.context_processor.importe_total_carro',              
            ],
        },
    },
]

WSGI_APPLICATION = 'ProyectoWeb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.mysql',
#        'NAME': 'database_django',
#        'USER': 'admin',
#        'PASSWORD': 'aa11AA11',
#        'HOST': 'database-django.c36a0u2w0pa5.us-east-1.rds.amazonaws.com',
#        'PORT': 3306
#    }
#}

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql',
#        'NAME': 'database_django',
#        'USER': 'admin',
#        'PASSWORD': 'aa11AA11',
#        'HOST': 'database-django.c36a0u2w0pa5.us-east-1.rds.amazonaws.com',
#        'PORT': 5432
#    }
#}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'es-eu'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL='/media/'
MEDIA_ROOT=os.path.join(BASE_DIR, 'media')

# configuración de email

EMAIL_BACKEND="django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST="smtp.gmail.com"
EMAIL_USE_TLS=True
EMAIL_PORT=587
EMAIL_HOST_USER="adrianvelazquezaragon@classroom.iespicasso.com"
EMAIL_HOST_PASSWORD="abckzymcjtsyoewx"

CRISPY_TEMPLATE_PACK='bootstrap4'

MESSAGE_TAGS={

    mensajes_de_error.DEBUG: 'debug',
    mensajes_de_error.INFO: 'info',
    mensajes_de_error.SUCCESS: 'success',
    mensajes_de_error.WARNING: 'warning',
    mensajes_de_error.ERROR: 'danger',



}


DEFAULT_AUTO_FIELD='django.db.models.AutoField'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',

# Este archivo de configuración (`settings.py`) define la configuración principal para el proyecto Django llamado "ProyectoWeb". 

# 1. **Importación y Definición de Rutas:**
#    - Se importan módulos como `os` y `pathlib.Path` para manejar rutas de archivos.
#    - `BASE_DIR` se define como el directorio raíz del proyecto, el cual es utilizado para formar rutas absolutas en el sistema de archivos.

# 2. **Configuración de Seguridad:**
#    - `SECRET_KEY`: Es una clave secreta utilizada por Django para varias operaciones internas de seguridad. No debe ser compartida en producción.
#    - `DEBUG`: Está habilitado para el desarrollo, lo que permite que se muestren detalles de los errores. En producción, esto debería ser desactivado.
#    - `ALLOWED_HOSTS`: Permite que cualquier host acceda al proyecto en desarrollo (esto debería ser más específico en producción).

# 3. **Aplicaciones Instaladas (`INSTALLED_APPS`):**
#    - Aquí se definen las aplicaciones de Django y las aplicaciones personalizadas del proyecto (como `ProyectoWebApp`, `blog`, `tienda`, etc.) que están habilitadas para ser utilizadas en el proyecto.
#    - También incluye aplicaciones como `crispy_forms` para mejorar los formularios y `whitenoise` para manejar archivos estáticos.

# 4. **Middleware:**
#    - Contiene una lista de middlewares utilizados por Django para procesar las solicitudes y respuestas. Incluye seguridad, manejo de sesiones, autenticación, y protección CSRF.

# 5. **Configuración de las URL y Plantillas:**
#    - `ROOT_URLCONF` define el archivo que contiene las rutas principales del proyecto.
#    - En `TEMPLATES`, se configura el motor de plantillas de Django para cargar plantillas desde las aplicaciones del proyecto, además de procesadores de contexto como `carro.context_processor.importe_total_carro` que proporciona datos adicionales a las plantillas.

# 6. **Base de Datos (`DATABASES`):**
#    - En este caso, se está utilizando una base de datos SQLite para el desarrollo (`db.sqlite3` en el directorio base del proyecto), aunque en los comentarios se menciona una posible configuración para MySQL y PostgreSQL.

# 7. **Validación de Contraseñas:**
#    - Se configuran los validadores de contraseñas para asegurar que las contraseñas de los usuarios cumplan con ciertos criterios de seguridad (como longitud mínima y evitar contraseñas comunes).

# 8. **Internacionalización y Localización:**
#    - `LANGUAGE_CODE`: Establece el idioma por defecto del proyecto a **euskera** (`es-eu`).
#    - `TIME_ZONE`: Define la zona horaria como UTC.
#    - `USE_I18N`, `USE_L10N`, y `USE_TZ`: Permiten la internacionalización, localización y el uso de zonas horarias.

# 9. **Archivos Estáticos y Multimedia:**
#    - `STATIC_URL` y `MEDIA_URL`: Definen las URLs para acceder a archivos estáticos (CSS, JS, imágenes) y archivos multimedia (como imágenes subidas por los usuarios).
#    - `MEDIA_ROOT`: Define la ubicación en el sistema de archivos para almacenar los archivos multimedia.
#    - `STATIC_ROOT`: Se usa en producción para recolectar archivos estáticos.
#    - Se configura `whitenoise` para manejar y comprimir archivos estáticos.

# 10. **Configuración de Correo Electrónico:**
#     - Se utiliza el backend SMTP de Gmail para enviar correos electrónicos.
#     - `EMAIL_HOST`, `EMAIL_PORT`, y `EMAIL_USE_TLS` definen los parámetros de conexión a Gmail.
#     - `EMAIL_HOST_USER` y `EMAIL_HOST_PASSWORD` contienen las credenciales de la cuenta de correo utilizada para enviar correos.

# 11. **Configuración de los Mensajes:**
#     - Se configura cómo se muestran los diferentes niveles de mensajes (como mensajes de éxito, advertencia o error) usando los valores de `django.contrib.messages`.

# 12. **Otras Configuraciones:**
#     - `DEFAULT_AUTO_FIELD`: Se configura para usar el tipo `AutoField` por defecto para los modelos.
#     - `LOGGING`: Se configura el sistema de logging para mostrar mensajes de depuración en la consola. Esto es útil durante el desarrollo.

# En resumen, este archivo de configuración establece las bases para el proyecto Django, incluyendo seguridad, bases de datos, correo electrónico, internacionalización, y el manejo de archivos estáticos y multimedia.

    },
}

WHITENOISE_MANIFEST_STRICT = False
